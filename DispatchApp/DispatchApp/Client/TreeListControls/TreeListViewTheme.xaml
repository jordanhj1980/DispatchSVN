<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:convert="clr-namespace:DispatchApp.Converters"
                    xmlns:local="clr-namespace:DispatchApp">

    <!--Converter for Indentation of items-->
    <convert:LevelToIndentConverter x:Key="LevelIndentConverter" />

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="19"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="19" Height="19" Background="Transparent">
                        <Border Width="19" Height="19"
                                BorderThickness="1"
                                BorderBrush="#FF7898B5"
                                CornerRadius="1"
                                SnapsToDevicePixels="true">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Color="White" Offset=".2"/>
                                        <GradientStop Color="#FFC0B7A6" Offset="1"/>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Path x:Name="ExpandPath"
                                  Margin="1,1,1,1"
                                  Fill="Black"
                                  Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="CellTemplate_Name">
        <DockPanel>
            <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" 
                      Margin="{Binding Path=Level,
                               Converter={StaticResource LevelIndentConverter},
                               RelativeSource={RelativeSource AncestorType={x:Type local:TreeListViewItem}}}"
                      IsChecked="{Binding Path=IsExpanded,
                                  RelativeSource={RelativeSource AncestorType={x:Type local:TreeListViewItem}}}"
                      ClickMode="Press"/>
            <!--首列绑定值
            <TextBlock Text="{Binding department}"/>-->
        </DockPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=HasItems,
                                   RelativeSource={RelativeSource AncestorType={x:Type local:TreeListViewItem}}}" 
                         Value="False">
                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ImageBrush x:Key="gvHeaderBackground" ImageSource="pack://application:,,,/Resources/list_header_bk.png" />
    <Style x:Key="gvColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Style.Setters>
            <Setter Property="Height" Value="34" />
            <Setter Property="Background" Value="{StaticResource gvHeaderBackground}" />
        </Style.Setters>
    </Style>

    <GridViewColumnCollection x:Key="gvColumns">
        <GridViewColumn Header=" "
                        CellTemplate="{StaticResource CellTemplate_Name}" Width="20" />
        <GridViewColumn Header="组名" 
                        DisplayMemberBinding="{Binding department}" Width="100" />
        <GridViewColumn Header="电话号码" 
                        DisplayMemberBinding="{Binding callno}" Width="100" />
        <GridViewColumn Header="标识" 
                        DisplayMemberBinding="{Binding name}" Width="100" />
    </GridViewColumnCollection>
    
    <!--交替行样式-->
    <!--<AlternationConverter x:Key="conBack">
        <SolidColorBrush>YellowGreen</SolidColorBrush>
        <SolidColorBrush>SkyBlue</SolidColorBrush>
    </AlternationConverter>-->

    <Style TargetType="{x:Type local:TreeListViewItem}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
        <!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},
                Path=(local:TreeListView.AlternationIndex),
                Converter={StaticResource conBack}}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeListViewItem}">
                    <StackPanel>
                        <Border x:Name="outerBorder"
                                BorderThickness="0,0,0,1"
                                BorderBrush="#FFFFFFFD"
                                Margin="0" Padding="0" Height="30"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="True">
                            <Border x:Name="innerBorder"
                                    BorderThickness="0,0,0,1"
                                    BorderBrush="#FFC6C6C6"
                                    Background="{TemplateBinding Background}"
                                    Padding="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    SnapsToDevicePixels="True">
                                <GridViewRowPresenter x:Name="PART_Header"
                                                  Content="{TemplateBinding Header}"
                                                  Columns="{StaticResource gvColumns}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="local:TreeListView.AlternationIndex" Value="1">
                            <Setter Property="Background" Value="#FFE1E4F7"></Setter>
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="true" SourceName="innerBorder">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="Background" Value="#FFC6C6C6" TargetName="innerBorder"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <!--<Setter TargetName="Bd" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="#FFC66152"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>-->
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="Background" Value="#FFC6C6C6" TargetName="innerBorder"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Width" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Height" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:TreeListView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeListView}">
                    <!--Create a standard border around the 'TreeListView'.-->
                    <Border Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <!--ScrollViewer providing horizontal scrolling functionality 
                                for both, content and headers.-->
                        <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                      VerticalScrollBarVisibility="Disabled">
                            <DockPanel>
                                <!--The header row.-->
                                <GridViewHeaderRowPresenter DockPanel.Dock="Top"
                                                            ColumnHeaderContainerStyle="{StaticResource gvColumnHeaderStyle}"
                                                            Columns="{StaticResource gvColumns}" />
                                <!--ScrollViewer providing vertical scrolling
                                        functionality for the content.-->
                                <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto">
                                    <!--ItemsPresenter containg the content.-->
                                    <ItemsPresenter />
                                </ScrollViewer>
                            </DockPanel>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>