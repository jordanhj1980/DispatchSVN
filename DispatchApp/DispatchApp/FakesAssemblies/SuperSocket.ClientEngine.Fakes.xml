<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SuperSocket.ClientEngine.Fakes</name>
    </assembly>
    <members>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession">
            <summary>SuperSocket.ClientEngine.AsyncTcpSession 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.#ctor(SuperSocket.ClientEngine.AsyncTcpSession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.Bind(SuperSocket.ClientEngine.IBufferSetter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.Bind(SuperSocket.ClientEngine.IClientSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.BeginReceive">
            <summary>设置 AsyncTcpSession.BeginReceive() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.Constructor">
            <summary>设置 AsyncTcpSession.AsyncTcpSession() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.OnClosed">
            <summary>设置 AsyncTcpSession.OnClosed() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.OnGetSocketSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.ProcessReceive(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.SendInternalPosListOfArraySegmentOfByte">
            <summary>设置 AsyncTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.Sending_CompletedObjectSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.Sending_Completed(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.SetBufferArraySegmentOfByte">
            <summary>设置 AsyncTcpSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.SocketEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.StartReceive">
            <summary>设置 AsyncTcpSession.StartReceive() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.BeginReceive">
            <summary>设置 AsyncTcpSession.BeginReceive() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.OnClosed">
            <summary>设置 AsyncTcpSession.OnClosed() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.OnGetSocketSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.ProcessReceive(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.SendInternalPosListOfArraySegmentOfByte">
            <summary>设置 AsyncTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.Sending_CompletedObjectSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.Sending_Completed(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.SetBufferArraySegmentOfByte">
            <summary>设置 AsyncTcpSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.SocketEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAsyncTcpSession.AllInstances.StartReceive">
            <summary>设置 AsyncTcpSession.StartReceive() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession">
            <summary>SuperSocket.ClientEngine.AuthenticatedStreamTcpSession 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.#ctor(SuperSocket.ClientEngine.AuthenticatedStreamTcpSession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.Bind(SuperSocket.ClientEngine.IBufferSetter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.Bind(SuperSocket.ClientEngine.IClientSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.BeginRead">
            <summary>设置 AuthenticatedStreamTcpSession.BeginRead() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.Close">
            <summary>设置 AuthenticatedStreamTcpSession.Close() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.Constructor">
            <summary>设置 AuthenticatedStreamTcpSession.AuthenticatedStreamTcpSession() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.IsIgnorableExceptionException">
            <summary>设置 AuthenticatedStreamTcpSession.IsIgnorableException(Exception e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.OnAuthenticatedStreamConnectedAuthenticatedStream">
            <summary>设置 AuthenticatedStreamTcpSession.OnAuthenticatedStreamConnected(AuthenticatedStream stream) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.OnDataReadIAsyncResult">
            <summary>设置 AuthenticatedStreamTcpSession.OnDataRead(IAsyncResult result) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.OnGetSocketSocketAsyncEventArgs">
            <summary>设置 AuthenticatedStreamTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.OnWriteCompleteIAsyncResult">
            <summary>设置 AuthenticatedStreamTcpSession.OnWriteComplete(IAsyncResult result) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.SecurityGet">
            <summary>设置 AuthenticatedStreamTcpSession.get_Security() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.SecuritySetSecurityOption">
            <summary>设置 AuthenticatedStreamTcpSession.set_Security(SecurityOption value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.SendInternalPosListOfArraySegmentOfByte">
            <summary>设置 AuthenticatedStreamTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.SocketEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 AuthenticatedStreamTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.StartRead">
            <summary>设置 AuthenticatedStreamTcpSession.StartRead() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.BeginRead">
            <summary>设置 AuthenticatedStreamTcpSession.BeginRead() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.Close">
            <summary>设置 AuthenticatedStreamTcpSession.Close() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.IsIgnorableExceptionException">
            <summary>设置 AuthenticatedStreamTcpSession.IsIgnorableException(Exception e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.OnAuthenticatedStreamConnectedAuthenticatedStream">
            <summary>设置 AuthenticatedStreamTcpSession.OnAuthenticatedStreamConnected(AuthenticatedStream stream) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.OnDataReadIAsyncResult">
            <summary>设置 AuthenticatedStreamTcpSession.OnDataRead(IAsyncResult result) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.OnGetSocketSocketAsyncEventArgs">
            <summary>设置 AuthenticatedStreamTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.OnWriteCompleteIAsyncResult">
            <summary>设置 AuthenticatedStreamTcpSession.OnWriteComplete(IAsyncResult result) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.SecurityGet">
            <summary>设置 AuthenticatedStreamTcpSession.get_Security() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.SecuritySetSecurityOption">
            <summary>设置 AuthenticatedStreamTcpSession.set_Security(SecurityOption value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.SendInternalPosListOfArraySegmentOfByte">
            <summary>设置 AuthenticatedStreamTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.SocketEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 AuthenticatedStreamTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimAuthenticatedStreamTcpSession.AllInstances.StartRead">
            <summary>设置 AuthenticatedStreamTcpSession.StartRead() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimClientSession">
            <summary>SuperSocket.ClientEngine.ClientSession 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimClientSession.#ctor(SuperSocket.ClientEngine.ClientSession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimClientSession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimClientSession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimClientSession.Bind(SuperSocket.ClientEngine.IBufferSetter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimClientSession.Bind(SuperSocket.ClientEngine.IClientSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.BufferGet">
            <summary>设置 ClientSession.get_Buffer() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.BufferSetArraySegmentOfByte">
            <summary>设置 ClientSession.set_Buffer(ArraySegment`1&lt;Byte&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ClientGet">
            <summary>设置 ClientSession.get_Client() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ClientSetSocket">
            <summary>设置 ClientSession.set_Client(Socket value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ClosedAddEventHandler">
            <summary>设置 ClientSession.add_Closed(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ClosedRemoveEventHandler">
            <summary>设置 ClientSession.remove_Closed(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ConnectedAddEventHandler">
            <summary>设置 ClientSession.add_Connected(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ConnectedRemoveEventHandler">
            <summary>设置 ClientSession.remove_Connected(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.Constructor">
            <summary>设置 ClientSession.ClientSession() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.DataReceivedAddEventHandlerOfDataEventArgs">
            <summary>设置 ClientSession.add_DataReceived(EventHandler`1&lt;DataEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.DataReceivedRemoveEventHandlerOfDataEventArgs">
            <summary>设置 ClientSession.remove_DataReceived(EventHandler`1&lt;DataEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ErrorAddEventHandlerOfErrorEventArgs">
            <summary>设置 ClientSession.add_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ErrorRemoveEventHandlerOfErrorEventArgs">
            <summary>设置 ClientSession.remove_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.IsConnectedGet">
            <summary>设置 ClientSession.get_IsConnected() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.IsConnectedSetBoolean">
            <summary>设置 ClientSession.set_IsConnected(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.LocalEndPointGet">
            <summary>设置 ClientSession.get_LocalEndPoint() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.LocalEndPointSetEndPoint">
            <summary>设置 ClientSession.set_LocalEndPoint(EndPoint value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.NoDelayGet">
            <summary>设置 ClientSession.get_NoDelay() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.NoDelaySetBoolean">
            <summary>设置 ClientSession.set_NoDelay(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.OnClosed">
            <summary>设置 ClientSession.OnClosed() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.OnConnected">
            <summary>设置 ClientSession.OnConnected() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.OnDataReceivedByteArrayInt32Int32">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.OnErrorException">
            <summary>设置 ClientSession.OnError(Exception e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ProxyGet">
            <summary>设置 ClientSession.get_Proxy() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ProxySetIProxyConnector">
            <summary>设置 ClientSession.set_Proxy(IProxyConnector value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ReceiveBufferSizeGet">
            <summary>设置 ClientSession.get_ReceiveBufferSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.ReceiveBufferSizeSetInt32">
            <summary>设置 ClientSession.set_ReceiveBufferSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.SendArraySegmentOfByte">
            <summary>设置 ClientSession.Send(ArraySegment`1&lt;Byte&gt; segment) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.SendByteArrayInt32Int32">
            <summary>设置 ClientSession.Send(Byte[] data, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.SendIListOfArraySegmentOfByte">
            <summary>设置 ClientSession.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.SendingQueueSizeGet">
            <summary>设置 ClientSession.get_SendingQueueSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.SendingQueueSizeSetInt32">
            <summary>设置 ClientSession.set_SendingQueueSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.SetBufferArraySegmentOfByte">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.SocketSuperSocketClientEngineIClientSessionget">
            <summary>设置 ClientSession.SuperSocket.ClientEngine.IClientSession.get_Socket() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.SuperSocketClientEngineIBufferSetterSetBufferArraySegmentOfByte">
            <summary>设置 ClientSession.SuperSocket.ClientEngine.IBufferSetter.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.BufferGet">
            <summary>设置 ClientSession.get_Buffer() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.BufferSetArraySegmentOfByte">
            <summary>设置 ClientSession.set_Buffer(ArraySegment`1&lt;Byte&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ClientGet">
            <summary>设置 ClientSession.get_Client() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ClientSetSocket">
            <summary>设置 ClientSession.set_Client(Socket value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ClosedAddEventHandler">
            <summary>设置 ClientSession.add_Closed(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ClosedRemoveEventHandler">
            <summary>设置 ClientSession.remove_Closed(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ConnectedAddEventHandler">
            <summary>设置 ClientSession.add_Connected(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ConnectedRemoveEventHandler">
            <summary>设置 ClientSession.remove_Connected(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.DataReceivedAddEventHandlerOfDataEventArgs">
            <summary>设置 ClientSession.add_DataReceived(EventHandler`1&lt;DataEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.DataReceivedRemoveEventHandlerOfDataEventArgs">
            <summary>设置 ClientSession.remove_DataReceived(EventHandler`1&lt;DataEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ErrorAddEventHandlerOfErrorEventArgs">
            <summary>设置 ClientSession.add_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ErrorRemoveEventHandlerOfErrorEventArgs">
            <summary>设置 ClientSession.remove_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.IsConnectedGet">
            <summary>设置 ClientSession.get_IsConnected() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.IsConnectedSetBoolean">
            <summary>设置 ClientSession.set_IsConnected(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.LocalEndPointGet">
            <summary>设置 ClientSession.get_LocalEndPoint() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.LocalEndPointSetEndPoint">
            <summary>设置 ClientSession.set_LocalEndPoint(EndPoint value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.NoDelayGet">
            <summary>设置 ClientSession.get_NoDelay() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.NoDelaySetBoolean">
            <summary>设置 ClientSession.set_NoDelay(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.OnClosed">
            <summary>设置 ClientSession.OnClosed() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.OnConnected">
            <summary>设置 ClientSession.OnConnected() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.OnDataReceivedByteArrayInt32Int32">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.OnErrorException">
            <summary>设置 ClientSession.OnError(Exception e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ProxyGet">
            <summary>设置 ClientSession.get_Proxy() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ProxySetIProxyConnector">
            <summary>设置 ClientSession.set_Proxy(IProxyConnector value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ReceiveBufferSizeGet">
            <summary>设置 ClientSession.get_ReceiveBufferSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.ReceiveBufferSizeSetInt32">
            <summary>设置 ClientSession.set_ReceiveBufferSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.SendArraySegmentOfByte">
            <summary>设置 ClientSession.Send(ArraySegment`1&lt;Byte&gt; segment) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.SendByteArrayInt32Int32">
            <summary>设置 ClientSession.Send(Byte[] data, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.SendIListOfArraySegmentOfByte">
            <summary>设置 ClientSession.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.SendingQueueSizeGet">
            <summary>设置 ClientSession.get_SendingQueueSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.SendingQueueSizeSetInt32">
            <summary>设置 ClientSession.set_SendingQueueSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.SetBufferArraySegmentOfByte">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.SocketSuperSocketClientEngineIClientSessionget">
            <summary>设置 ClientSession.SuperSocket.ClientEngine.IClientSession.get_Socket() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimClientSession.AllInstances.SuperSocketClientEngineIBufferSetterSetBufferArraySegmentOfByte">
            <summary>设置 ClientSession.SuperSocket.ClientEngine.IBufferSetter.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1">
            <summary>SuperSocket.ClientEngine.ConcurrentBatchQueue`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.#ctor(SuperSocket.ClientEngine.ConcurrentBatchQueue{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.Bind(SuperSocket.ClientEngine.IBatchQueue{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.Constructor">
            <summary>设置 ConcurrentBatchQueue`1.ConcurrentBatchQueue`1() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.ConstructorInt32">
            <summary>设置 ConcurrentBatchQueue`1.ConcurrentBatchQueue`1(Int32 capacity) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.ConstructorInt32FuncOfT0Boolean">
            <summary>设置 ConcurrentBatchQueue`1.ConcurrentBatchQueue`1(Int32 capacity, Func`2&lt;!0,Boolean&gt; nullValidator) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.ConstructorT0Array">
            <summary>设置 ConcurrentBatchQueue`1.ConcurrentBatchQueue`1(!0[] array) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.ConstructorT0ArrayFuncOfT0Boolean">
            <summary>设置 ConcurrentBatchQueue`1.ConcurrentBatchQueue`1(!0[] array, Func`2&lt;!0,Boolean&gt; nullValidator) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.CountGet">
            <summary>设置 ConcurrentBatchQueue`1.get_Count() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.EnqueueIListOfT0">
            <summary>设置 ConcurrentBatchQueue`1.Enqueue(IList`1&lt;!0&gt; items) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.EnqueueT0">
            <summary>设置 ConcurrentBatchQueue`1.Enqueue(!0 item) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.IsEmptyGet">
            <summary>设置 ConcurrentBatchQueue`1.get_IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.StaticConstructor">
            <summary>设置 ConcurrentBatchQueue`1.ConcurrentBatchQueue`1() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.TryDequeueIListOfT0">
            <summary>设置 ConcurrentBatchQueue`1.TryDequeue(IList`1&lt;!0&gt; outputItems) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.TryEnqueueIListOfT0BooleanOut">
            <summary>设置 ConcurrentBatchQueue`1.TryEnqueue(IList`1&lt;!0&gt; items, Boolean&amp; full) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.TryEnqueueT0BooleanOut">
            <summary>设置 ConcurrentBatchQueue`1.TryEnqueue(!0 item, Boolean&amp; full) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.AllInstances.CountGet">
            <summary>设置 ConcurrentBatchQueue`1.get_Count() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.AllInstances.EnqueueIListOfT0">
            <summary>设置 ConcurrentBatchQueue`1.Enqueue(IList`1&lt;!0&gt; items) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.AllInstances.EnqueueT0">
            <summary>设置 ConcurrentBatchQueue`1.Enqueue(!0 item) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.AllInstances.IsEmptyGet">
            <summary>设置 ConcurrentBatchQueue`1.get_IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.AllInstances.TryDequeueIListOfT0">
            <summary>设置 ConcurrentBatchQueue`1.TryDequeue(IList`1&lt;!0&gt; outputItems) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.AllInstances.TryEnqueueIListOfT0BooleanOut">
            <summary>设置 ConcurrentBatchQueue`1.TryEnqueue(IList`1&lt;!0&gt; items, Boolean&amp; full) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConcurrentBatchQueue`1.AllInstances.TryEnqueueT0BooleanOut">
            <summary>设置 ConcurrentBatchQueue`1.TryEnqueue(!0 item, Boolean&amp; full) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension">
            <summary>SuperSocket.ClientEngine.ConnectAsyncExtension 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension.ConnectAsyncEndPointEndPointConnectedCallbackObject">
            <summary>设置 ConnectAsyncExtension.ConnectAsync(EndPoint remoteEndPoint, EndPoint localEndPoint, ConnectedCallback callback, Object state) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension.CreateSocketAsyncEventArgsEndPointConnectedCallbackObject">
            <summary>设置 ConnectAsyncExtension.CreateSocketAsyncEventArgs(EndPoint remoteEndPoint, ConnectedCallback callback, Object state) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension.PreferIPv4Stack">
            <summary>设置 ConnectAsyncExtension.PreferIPv4Stack() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimConnectAsyncExtension.SocketAsyncEventCompletedObjectSocketAsyncEventArgs">
            <summary>设置 ConnectAsyncExtension.SocketAsyncEventCompleted(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs">
            <summary>SuperSocket.ClientEngine.DataEventArgs 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.#ctor(SuperSocket.ClientEngine.DataEventArgs)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.Constructor">
            <summary>设置 DataEventArgs.DataEventArgs() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.DataGet">
            <summary>设置 DataEventArgs.get_Data() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.DataSetByteArray">
            <summary>设置 DataEventArgs.set_Data(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.LengthGet">
            <summary>设置 DataEventArgs.get_Length() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.LengthSetInt32">
            <summary>设置 DataEventArgs.set_Length(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.OffsetGet">
            <summary>设置 DataEventArgs.get_Offset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.OffsetSetInt32">
            <summary>设置 DataEventArgs.set_Offset(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.AllInstances.DataGet">
            <summary>设置 DataEventArgs.get_Data() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.AllInstances.DataSetByteArray">
            <summary>设置 DataEventArgs.set_Data(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.AllInstances.LengthGet">
            <summary>设置 DataEventArgs.get_Length() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.AllInstances.LengthSetInt32">
            <summary>设置 DataEventArgs.set_Length(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.AllInstances.OffsetGet">
            <summary>设置 DataEventArgs.get_Offset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimDataEventArgs.AllInstances.OffsetSetInt32">
            <summary>设置 DataEventArgs.set_Offset(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs">
            <summary>SuperSocket.ClientEngine.ErrorEventArgs 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.#ctor(SuperSocket.ClientEngine.ErrorEventArgs)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.ConstructorException">
            <summary>设置 ErrorEventArgs.ErrorEventArgs(Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.ExceptionGet">
            <summary>设置 ErrorEventArgs.get_Exception() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.ExceptionSetException">
            <summary>设置 ErrorEventArgs.set_Exception(Exception value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.AllInstances.ExceptionGet">
            <summary>设置 ErrorEventArgs.get_Exception() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimErrorEventArgs.AllInstances.ExceptionSetException">
            <summary>设置 ErrorEventArgs.set_Exception(Exception value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimExtensions">
            <summary>SuperSocket.ClientEngine.Extensions 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.CloneRangeOf1M0ArrayInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],System.Int32,System.Int32,``0[]})">
            <summary>设置 Extensions.CloneRange(!!0[] source, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.EndsWithOf1IListOfM0Int32Int32M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0[],System.Boolean})">
            <summary>设置 Extensions.EndsWith(IList`1&lt;!!0&gt; source, Int32 offset, Int32 length, !!0[] mark) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.EndsWithOf1IListOfM0M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0[],System.Boolean})">
            <summary>设置 Extensions.EndsWith(IList`1&lt;!!0&gt; source, !!0[] mark) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.IndexOfOf1IListOfM0M0Int32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32,System.Int32})">
            <summary>设置 Extensions.IndexOf(IList`1&lt;!!0&gt; source, !!0 target, Int32 pos, Int32 length) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.RandomOrderOf1M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],``0[]})">
            <summary>设置 Extensions.RandomOrder(!!0[] source) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.SearchMarkOf1IListOfM0Int32Int32M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0[],System.Nullable{System.Int32}})">
            <summary>设置 Extensions.SearchMark(IList`1&lt;!!0&gt; source, Int32 offset, Int32 length, !!0[] mark) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.SearchMarkOf1IListOfM0Int32Int32M0ArrayInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0[],System.Int32,System.Nullable{System.Int32}})">
            <summary>设置 Extensions.SearchMark(IList`1&lt;!!0&gt; source, Int32 offset, Int32 length, !!0[] mark, Int32 matched) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.SearchMarkOf1IListOfM0Int32Int32SearchMarkStateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},System.Int32,System.Int32,SuperSocket.ClientEngine.SearchMarkState{``0},System.Int32})">
            <summary>设置 Extensions.SearchMark(IList`1&lt;!!0&gt; source, Int32 offset, Int32 length, SearchMarkState`1&lt;!!0&gt; searchState) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.SearchMarkOf1IListOfM0M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0[],System.Nullable{System.Int32}})">
            <summary>设置 Extensions.SearchMark(IList`1&lt;!!0&gt; source, !!0[] mark) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.StartsWithOf1IListOfM0Int32Int32M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0[],System.Int32})">
            <summary>设置 Extensions.StartsWith(IList`1&lt;!!0&gt; source, Int32 offset, Int32 length, !!0[] mark) 的 填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimExtensions.StartsWithOf1IListOfM0M0Array``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0[],System.Int32})">
            <summary>设置 Extensions.StartsWith(IList`1&lt;!!0&gt; source, !!0[] mark) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimExtensions.GetValueNameValueCollectionString">
            <summary>设置 Extensions.GetValue(NameValueCollection collection, String key) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimExtensions.GetValueNameValueCollectionStringString">
            <summary>设置 Extensions.GetValue(NameValueCollection collection, String key, String defaultValue) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimExtensions.StaticConstructor">
            <summary>设置 Extensions.Extensions() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimPosList`1">
            <summary>SuperSocket.ClientEngine.PosList`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.#ctor(SuperSocket.ClientEngine.PosList{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(SuperSocket.ClientEngine.IPosList{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(System.Collections.Generic.ICollection{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(System.Collections.Generic.IList{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Bind(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimPosList`1.Constructor">
            <summary>设置 PosList`1.PosList`1() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimPosList`1.PositionGet">
            <summary>设置 PosList`1.get_Position() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimPosList`1.PositionSetInt32">
            <summary>设置 PosList`1.set_Position(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimPosList`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimPosList`1.AllInstances.PositionGet">
            <summary>设置 PosList`1.get_Position() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimPosList`1.AllInstances.PositionSetInt32">
            <summary>设置 PosList`1.set_Position(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs">
            <summary>SuperSocket.ClientEngine.ProxyEventArgs 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.#ctor(SuperSocket.ClientEngine.ProxyEventArgs)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.ConnectedGet">
            <summary>设置 ProxyEventArgs.get_Connected() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.ConnectedSetBoolean">
            <summary>设置 ProxyEventArgs.set_Connected(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.ConstructorBooleanSocketStringException">
            <summary>设置 ProxyEventArgs.ProxyEventArgs(Boolean connected, Socket socket, String targetHostName, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.ConstructorException">
            <summary>设置 ProxyEventArgs.ProxyEventArgs(Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.ConstructorSocket">
            <summary>设置 ProxyEventArgs.ProxyEventArgs(Socket socket) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.ConstructorSocketString">
            <summary>设置 ProxyEventArgs.ProxyEventArgs(Socket socket, String targetHostHame) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.ExceptionGet">
            <summary>设置 ProxyEventArgs.get_Exception() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.ExceptionSetException">
            <summary>设置 ProxyEventArgs.set_Exception(Exception value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.SocketGet">
            <summary>设置 ProxyEventArgs.get_Socket() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.SocketSetSocket">
            <summary>设置 ProxyEventArgs.set_Socket(Socket value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.TargetHostNameGet">
            <summary>设置 ProxyEventArgs.get_TargetHostName() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.TargetHostNameSetString">
            <summary>设置 ProxyEventArgs.set_TargetHostName(String value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances.ConnectedGet">
            <summary>设置 ProxyEventArgs.get_Connected() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances.ConnectedSetBoolean">
            <summary>设置 ProxyEventArgs.set_Connected(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances.ExceptionGet">
            <summary>设置 ProxyEventArgs.get_Exception() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances.ExceptionSetException">
            <summary>设置 ProxyEventArgs.set_Exception(Exception value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances.SocketGet">
            <summary>设置 ProxyEventArgs.get_Socket() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances.SocketSetSocket">
            <summary>设置 ProxyEventArgs.set_Socket(Socket value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances.TargetHostNameGet">
            <summary>设置 ProxyEventArgs.get_TargetHostName() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimProxyEventArgs.AllInstances.TargetHostNameSetString">
            <summary>设置 ProxyEventArgs.set_TargetHostName(String value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1">
            <summary>SuperSocket.ClientEngine.SearchMarkState`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.#ctor(SuperSocket.ClientEngine.SearchMarkState{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.ConstructorT0Array">
            <summary>设置 SearchMarkState`1.SearchMarkState`1(!0[] mark) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.MarkGet">
            <summary>设置 SearchMarkState`1.get_Mark() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.MarkSetT0Array">
            <summary>设置 SearchMarkState`1.set_Mark(!0[] value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.MatchedGet">
            <summary>设置 SearchMarkState`1.get_Matched() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.MatchedSetInt32">
            <summary>设置 SearchMarkState`1.set_Matched(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.AllInstances.MarkGet">
            <summary>设置 SearchMarkState`1.get_Mark() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.AllInstances.MarkSetT0Array">
            <summary>设置 SearchMarkState`1.set_Mark(!0[] value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.AllInstances.MatchedGet">
            <summary>设置 SearchMarkState`1.get_Matched() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSearchMarkState`1.AllInstances.MatchedSetInt32">
            <summary>设置 SearchMarkState`1.set_Matched(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimSecurityOption">
            <summary>SuperSocket.ClientEngine.SecurityOption 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.#ctor(SuperSocket.ClientEngine.SecurityOption)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllowCertificateChainErrorsGet">
            <summary>设置 SecurityOption.get_AllowCertificateChainErrors() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllowCertificateChainErrorsSetBoolean">
            <summary>设置 SecurityOption.set_AllowCertificateChainErrors(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllowNameMismatchCertificateGet">
            <summary>设置 SecurityOption.get_AllowNameMismatchCertificate() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllowNameMismatchCertificateSetBoolean">
            <summary>设置 SecurityOption.set_AllowNameMismatchCertificate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllowUnstrustedCertificateGet">
            <summary>设置 SecurityOption.get_AllowUnstrustedCertificate() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllowUnstrustedCertificateSetBoolean">
            <summary>设置 SecurityOption.set_AllowUnstrustedCertificate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.CertificatesGet">
            <summary>设置 SecurityOption.get_Certificates() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.CertificatesSetX509CertificateCollection">
            <summary>设置 SecurityOption.set_Certificates(X509CertificateCollection value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.Constructor">
            <summary>设置 SecurityOption.SecurityOption() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.ConstructorNetworkCredential">
            <summary>设置 SecurityOption.SecurityOption(NetworkCredential credential) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.ConstructorSslProtocols">
            <summary>设置 SecurityOption.SecurityOption(SslProtocols enabledSslProtocols) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.ConstructorSslProtocolsX509CertificateCollection">
            <summary>设置 SecurityOption.SecurityOption(SslProtocols enabledSslProtocols, X509CertificateCollection certificates) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.CredentialGet">
            <summary>设置 SecurityOption.get_Credential() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.CredentialSetNetworkCredential">
            <summary>设置 SecurityOption.set_Credential(NetworkCredential value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.EnabledSslProtocolsGet">
            <summary>设置 SecurityOption.get_EnabledSslProtocols() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.EnabledSslProtocolsSetSslProtocols">
            <summary>设置 SecurityOption.set_EnabledSslProtocols(SslProtocols value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.GetDefaultProtocol">
            <summary>设置 SecurityOption.GetDefaultProtocol() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.AllowCertificateChainErrorsGet">
            <summary>设置 SecurityOption.get_AllowCertificateChainErrors() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.AllowCertificateChainErrorsSetBoolean">
            <summary>设置 SecurityOption.set_AllowCertificateChainErrors(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.AllowNameMismatchCertificateGet">
            <summary>设置 SecurityOption.get_AllowNameMismatchCertificate() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.AllowNameMismatchCertificateSetBoolean">
            <summary>设置 SecurityOption.set_AllowNameMismatchCertificate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.AllowUnstrustedCertificateGet">
            <summary>设置 SecurityOption.get_AllowUnstrustedCertificate() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.AllowUnstrustedCertificateSetBoolean">
            <summary>设置 SecurityOption.set_AllowUnstrustedCertificate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.CertificatesGet">
            <summary>设置 SecurityOption.get_Certificates() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.CertificatesSetX509CertificateCollection">
            <summary>设置 SecurityOption.set_Certificates(X509CertificateCollection value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.CredentialGet">
            <summary>设置 SecurityOption.get_Credential() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.CredentialSetNetworkCredential">
            <summary>设置 SecurityOption.set_Credential(NetworkCredential value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.EnabledSslProtocolsGet">
            <summary>设置 SecurityOption.get_EnabledSslProtocols() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSecurityOption.AllInstances.EnabledSslProtocolsSetSslProtocols">
            <summary>设置 SecurityOption.set_EnabledSslProtocols(SslProtocols value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession">
            <summary>SuperSocket.ClientEngine.SslStreamTcpSession 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.#ctor(SuperSocket.ClientEngine.SslStreamTcpSession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.Bind(SuperSocket.ClientEngine.IBufferSetter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.Bind(SuperSocket.ClientEngine.IClientSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.Constructor">
            <summary>设置 SslStreamTcpSession.SslStreamTcpSession() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.OnAuthenticatedIAsyncResult">
            <summary>设置 SslStreamTcpSession.OnAuthenticated(IAsyncResult result) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.StartAuthenticatedStreamSocket">
            <summary>设置 SslStreamTcpSession.StartAuthenticatedStream(Socket client) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.AllInstances.OnAuthenticatedIAsyncResult">
            <summary>设置 SslStreamTcpSession.OnAuthenticated(IAsyncResult result) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimSslStreamTcpSession.AllInstances.StartAuthenticatedStreamSocket">
            <summary>设置 SslStreamTcpSession.StartAuthenticatedStream(Socket client) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession">
            <summary>SuperSocket.ClientEngine.TcpClientSession 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.#ctor(SuperSocket.ClientEngine.TcpClientSession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.Bind(SuperSocket.ClientEngine.IBufferSetter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.Bind(SuperSocket.ClientEngine.IClientSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.Close">
            <summary>设置 TcpClientSession.Close() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.ConnectEndPoint">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.Constructor">
            <summary>设置 TcpClientSession.TcpClientSession() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.DequeueSend">
            <summary>设置 TcpClientSession.DequeueSend() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.DetectConnected">
            <summary>设置 TcpClientSession.DetectConnected() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.EnsureSocketClosed">
            <summary>设置 TcpClientSession.EnsureSocketClosed() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.EnsureSocketClosedSocket">
            <summary>设置 TcpClientSession.EnsureSocketClosed(Socket prevClient) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.GetHostOfEndPointEndPoint">
            <summary>设置 TcpClientSession.GetHostOfEndPoint(EndPoint endPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.GetSendingItems">
            <summary>设置 TcpClientSession.GetSendingItems() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.GetSendingQueue">
            <summary>设置 TcpClientSession.GetSendingQueue() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.HostNameGet">
            <summary>设置 TcpClientSession.get_HostName() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.HostNameSetString">
            <summary>设置 TcpClientSession.set_HostName(String value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.IsIgnorableExceptionException">
            <summary>设置 TcpClientSession.IsIgnorableException(Exception e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.IsIgnorableSocketErrorInt32">
            <summary>设置 TcpClientSession.IsIgnorableSocketError(Int32 errorCode) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.IsSendingGet">
            <summary>设置 TcpClientSession.get_IsSending() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.LocalEndPointGet">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.LocalEndPointSetEndPoint">
            <summary>设置 TcpClientSession.set_LocalEndPoint(EndPoint value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.OnSendingCompleted">
            <summary>设置 TcpClientSession.OnSendingCompleted() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 TcpClientSession.ProcessConnect(Socket socket, Object state, SocketAsyncEventArgs e, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.Proxy_CompletedObjectProxyEventArgs">
            <summary>设置 TcpClientSession.Proxy_Completed(Object sender, ProxyEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.ReceiveBufferSizeGet">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.ReceiveBufferSizeSetInt32">
            <summary>设置 TcpClientSession.set_ReceiveBufferSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.TrySendArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.Close">
            <summary>设置 TcpClientSession.Close() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.ConnectEndPoint">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.DequeueSend">
            <summary>设置 TcpClientSession.DequeueSend() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.DetectConnected">
            <summary>设置 TcpClientSession.DetectConnected() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.EnsureSocketClosed">
            <summary>设置 TcpClientSession.EnsureSocketClosed() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.EnsureSocketClosedSocket">
            <summary>设置 TcpClientSession.EnsureSocketClosed(Socket prevClient) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.GetHostOfEndPointEndPoint">
            <summary>设置 TcpClientSession.GetHostOfEndPoint(EndPoint endPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.GetSendingItems">
            <summary>设置 TcpClientSession.GetSendingItems() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.GetSendingQueue">
            <summary>设置 TcpClientSession.GetSendingQueue() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.HostNameGet">
            <summary>设置 TcpClientSession.get_HostName() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.HostNameSetString">
            <summary>设置 TcpClientSession.set_HostName(String value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.IsIgnorableExceptionException">
            <summary>设置 TcpClientSession.IsIgnorableException(Exception e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.IsIgnorableSocketErrorInt32">
            <summary>设置 TcpClientSession.IsIgnorableSocketError(Int32 errorCode) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.IsSendingGet">
            <summary>设置 TcpClientSession.get_IsSending() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.LocalEndPointGet">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.LocalEndPointSetEndPoint">
            <summary>设置 TcpClientSession.set_LocalEndPoint(EndPoint value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.OnSendingCompleted">
            <summary>设置 TcpClientSession.OnSendingCompleted() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 TcpClientSession.ProcessConnect(Socket socket, Object state, SocketAsyncEventArgs e, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.Proxy_CompletedObjectProxyEventArgs">
            <summary>设置 TcpClientSession.Proxy_Completed(Object sender, ProxyEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.ReceiveBufferSizeGet">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.ReceiveBufferSizeSetInt32">
            <summary>设置 TcpClientSession.set_ReceiveBufferSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.TrySendArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.ShimTcpClientSession.AllInstances.TrySendIListOfArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession">
            <summary>SuperSocket.ClientEngine.AsyncTcpSession 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.AttachBackingFieldToLocalEndPoint">
            <summary>附加委托以将 StubAsyncTcpSession.LocalEndPoint 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.AttachBackingFieldToReceiveBufferSize">
            <summary>附加委托以将 StubAsyncTcpSession.ReceiveBufferSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.Close">
            <summary>设置 TcpClientSession.Close() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.Close01">
            <summary>设置 TcpClientSession.Close() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.Connect(System.Net.EndPoint)">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.ConnectEndPoint">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.InitializeStub">
            <summary>初始化 type StubAsyncTcpSession 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.IsIgnorableException(System.Exception)">
            <summary>设置 TcpClientSession.IsIgnorableException(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.IsIgnorableExceptionException">
            <summary>设置 TcpClientSession.IsIgnorableException(Exception e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.LocalEndPointGet">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.LocalEndPointSetEndPoint">
            <summary>设置 TcpClientSession.set_LocalEndPoint(EndPoint value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnClosed">
            <summary>设置 AsyncTcpSession.OnClosed() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnClosed01">
            <summary>设置 AsyncTcpSession.OnClosed() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnConnected">
            <summary>设置 ClientSession.OnConnected() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnConnected01">
            <summary>设置 ClientSession.OnConnected() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnDataReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnDataReceivedByteArrayInt32Int32">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnError(System.Exception)">
            <summary>设置 ClientSession.OnError(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnErrorException">
            <summary>设置 ClientSession.OnError(Exception e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnGetSocket(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 AsyncTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.OnGetSocketSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.ReceiveBufferSizeGet">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.ReceiveBufferSizeSetInt32">
            <summary>设置 TcpClientSession.set_ReceiveBufferSize(Int32 value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.SendInternal(SuperSocket.ClientEngine.PosList{System.ArraySegment{System.Byte}})">
            <summary>设置 AsyncTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.SendInternalPosListOfArraySegmentOfByte">
            <summary>设置 AsyncTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.SetBuffer(System.ArraySegment{System.Byte})">
            <summary>设置 AsyncTcpSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.SetBufferArraySegmentOfByte">
            <summary>设置 AsyncTcpSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.SocketEventArgsCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 AsyncTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.SocketEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 AsyncTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.TrySendArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.LocalEndPoint">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAsyncTcpSession.ReceiveBufferSize">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession">
            <summary>SuperSocket.ClientEngine.AuthenticatedStreamTcpSession 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.AttachBackingFieldToLocalEndPoint">
            <summary>附加委托以将 StubAuthenticatedStreamTcpSession.LocalEndPoint 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.AttachBackingFieldToReceiveBufferSize">
            <summary>附加委托以将 StubAuthenticatedStreamTcpSession.ReceiveBufferSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.Close">
            <summary>设置 AuthenticatedStreamTcpSession.Close() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.Close01">
            <summary>设置 AuthenticatedStreamTcpSession.Close() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.Connect(System.Net.EndPoint)">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.ConnectEndPoint">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.InitializeStub">
            <summary>初始化 type StubAuthenticatedStreamTcpSession 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.IsIgnorableException(System.Exception)">
            <summary>设置 AuthenticatedStreamTcpSession.IsIgnorableException(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.IsIgnorableExceptionException">
            <summary>设置 AuthenticatedStreamTcpSession.IsIgnorableException(Exception e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.LocalEndPointGet">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.LocalEndPointSetEndPoint">
            <summary>设置 TcpClientSession.set_LocalEndPoint(EndPoint value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnClosed">
            <summary>设置 ClientSession.OnClosed() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnClosed01">
            <summary>设置 ClientSession.OnClosed() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnConnected">
            <summary>设置 ClientSession.OnConnected() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnConnected01">
            <summary>设置 ClientSession.OnConnected() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnDataReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnDataReceivedByteArrayInt32Int32">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnError(System.Exception)">
            <summary>设置 ClientSession.OnError(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnErrorException">
            <summary>设置 ClientSession.OnError(Exception e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnGetSocket(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 AuthenticatedStreamTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.OnGetSocketSocketAsyncEventArgs">
            <summary>设置 AuthenticatedStreamTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.ReceiveBufferSizeGet">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.ReceiveBufferSizeSetInt32">
            <summary>设置 TcpClientSession.set_ReceiveBufferSize(Int32 value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.SendInternal(SuperSocket.ClientEngine.PosList{System.ArraySegment{System.Byte}})">
            <summary>设置 AuthenticatedStreamTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.SendInternalPosListOfArraySegmentOfByte">
            <summary>设置 AuthenticatedStreamTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.SetBuffer(System.ArraySegment{System.Byte})">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.SetBufferArraySegmentOfByte">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.SocketEventArgsCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 AuthenticatedStreamTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.SocketEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 AuthenticatedStreamTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.StartAuthenticatedStream(System.Net.Sockets.Socket)">
            <summary>设置 AuthenticatedStreamTcpSession.StartAuthenticatedStream(Socket client) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.StartAuthenticatedStreamSocket">
            <summary>设置 AuthenticatedStreamTcpSession.StartAuthenticatedStream(Socket client) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.TrySendArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.LocalEndPoint">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubAuthenticatedStreamTcpSession.ReceiveBufferSize">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubClientSession">
            <summary>SuperSocket.ClientEngine.ClientSession 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.AttachBackingFieldToLocalEndPoint">
            <summary>附加委托以将 StubClientSession.LocalEndPoint 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.AttachBackingFieldToReceiveBufferSize">
            <summary>附加委托以将 StubClientSession.ReceiveBufferSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.Close">
            <summary>设置 ClientSession.Close() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.Close01">
            <summary>设置 ClientSession.Close() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.Connect(System.Net.EndPoint)">
            <summary>设置 ClientSession.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.ConnectEndPoint">
            <summary>设置 ClientSession.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.InitializeStub">
            <summary>初始化 type StubClientSession 的新实例</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.LocalEndPointGet">
            <summary>设置 ClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.LocalEndPointSetEndPoint">
            <summary>设置 ClientSession.set_LocalEndPoint(EndPoint value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.OnClosed">
            <summary>设置 ClientSession.OnClosed() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.OnClosed01">
            <summary>设置 ClientSession.OnClosed() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.OnConnected">
            <summary>设置 ClientSession.OnConnected() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.OnConnected01">
            <summary>设置 ClientSession.OnConnected() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.OnDataReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.OnDataReceivedByteArrayInt32Int32">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.OnError(System.Exception)">
            <summary>设置 ClientSession.OnError(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.OnErrorException">
            <summary>设置 ClientSession.OnError(Exception e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.ReceiveBufferSizeGet">
            <summary>设置 ClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.ReceiveBufferSizeSetInt32">
            <summary>设置 ClientSession.set_ReceiveBufferSize(Int32 value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.SetBuffer(System.ArraySegment{System.Byte})">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.SetBufferArraySegmentOfByte">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 ClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubClientSession.TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 ClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.TrySendArraySegmentOfByte">
            <summary>设置 ClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubClientSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 ClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubClientSession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubClientSession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubClientSession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubClientSession.LocalEndPoint">
            <summary>设置 ClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubClientSession.ReceiveBufferSize">
            <summary>设置 ClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1">
            <summary>SuperSocket.ClientEngine.ConcurrentBatchQueue`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.#ctor(`0[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.#ctor(System.Int32,System.Func{`0,System.Boolean})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.#ctor(`0[],System.Func{`0,System.Boolean})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.InitializeStub">
            <summary>初始化 type StubConcurrentBatchQueue 的新实例</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubConcurrentBatchQueue`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubDataEventArgs">
            <summary>SuperSocket.ClientEngine.DataEventArgs 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubDataEventArgs.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubDataEventArgs.InitializeStub">
            <summary>初始化 type StubDataEventArgs 的新实例</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubDataEventArgs.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubDataEventArgs.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubDataEventArgs.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubErrorEventArgs">
            <summary>SuperSocket.ClientEngine.ErrorEventArgs 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubErrorEventArgs.#ctor(System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubErrorEventArgs.InitializeStub">
            <summary>初始化 type StubErrorEventArgs 的新实例</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubErrorEventArgs.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubErrorEventArgs.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubErrorEventArgs.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1">
            <summary>SuperSocket.ClientEngine.IBatchQueue`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.#ctor">
            <summary>初始化 type StubIBatchQueue 的新实例</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.CountGet">
            <summary>设置 IBatchQueue`1.get_Count() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.EnqueueIListOfT0">
            <summary>设置 IBatchQueue`1.Enqueue(IList`1&lt;!0&gt; items) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.EnqueueT0">
            <summary>设置 IBatchQueue`1.Enqueue(!0 item) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.IsEmptyGet">
            <summary>设置 IBatchQueue`1.get_IsEmpty() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.ssce::SuperSocket#ClientEngine#IBatchQueue{T}#Enqueue(`0)">
            <summary>设置 IBatchQueue`1.Enqueue(!0 item) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.ssce::SuperSocket#ClientEngine#IBatchQueue{T}#Enqueue(System.Collections.Generic.IList{`0})">
            <summary>设置 IBatchQueue`1.Enqueue(IList`1&lt;!0&gt; items) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.ssce::SuperSocket#ClientEngine#IBatchQueue{T}#TryDequeue(System.Collections.Generic.IList{`0})">
            <summary>设置 IBatchQueue`1.TryDequeue(IList`1&lt;!0&gt; outputItems) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.TryDequeueIListOfT0">
            <summary>设置 IBatchQueue`1.TryDequeue(IList`1&lt;!0&gt; outputItems) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.ssce::SuperSocket#ClientEngine#IBatchQueue{T}#Count">
            <summary>设置 IBatchQueue`1.get_Count() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIBatchQueue`1.ssce::SuperSocket#ClientEngine#IBatchQueue{T}#IsEmpty">
            <summary>设置 IBatchQueue`1.get_IsEmpty() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubIBufferSetter">
            <summary>SuperSocket.ClientEngine.IBufferSetter 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIBufferSetter.#ctor">
            <summary>初始化 type StubIBufferSetter 的新实例</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIBufferSetter.SetBufferArraySegmentOfByte">
            <summary>设置 IBufferSetter.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIBufferSetter.ssce::SuperSocket#ClientEngine#IBufferSetter#SetBuffer(System.ArraySegment{System.Byte})">
            <summary>设置 IBufferSetter.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 存根</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubIClientSession">
            <summary>SuperSocket.ClientEngine.IClientSession 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.#ctor">
            <summary>初始化 type StubIClientSession 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.AttachBackingFieldToProxy">
            <summary>附加委托以将 StubIClientSession.Proxy 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.AttachBackingFieldToReceiveBufferSize">
            <summary>附加委托以将 StubIClientSession.ReceiveBufferSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.AttachBackingFieldToSendingQueueSize">
            <summary>附加委托以将 StubIClientSession.SendingQueueSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.Close">
            <summary>设置 IClientSession.Close() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.ConnectEndPoint">
            <summary>设置 IClientSession.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.IsConnectedGet">
            <summary>设置 IClientSession.get_IsConnected() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.ProxyGet">
            <summary>设置 IClientSession.get_Proxy() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.ProxySetIProxyConnector">
            <summary>设置 IClientSession.set_Proxy(IProxyConnector value) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.ReceiveBufferSizeGet">
            <summary>设置 IClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.ReceiveBufferSizeSetInt32">
            <summary>设置 IClientSession.set_ReceiveBufferSize(Int32 value) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.SendArraySegmentOfByte">
            <summary>设置 IClientSession.Send(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.SendByteArrayInt32Int32">
            <summary>设置 IClientSession.Send(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.SendIListOfArraySegmentOfByte">
            <summary>设置 IClientSession.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.SendingQueueSizeGet">
            <summary>设置 IClientSession.get_SendingQueueSize() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.SendingQueueSizeSetInt32">
            <summary>设置 IClientSession.set_SendingQueueSize(Int32 value) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.SocketGet">
            <summary>设置 IClientSession.get_Socket() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#Close">
            <summary>设置 IClientSession.Close() 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#Connect(System.Net.EndPoint)">
            <summary>设置 IClientSession.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#Send(System.ArraySegment{System.Byte})">
            <summary>设置 IClientSession.Send(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 IClientSession.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#Send(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 IClientSession.Send(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 IClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 IClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.TrySendArraySegmentOfByte">
            <summary>设置 IClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIClientSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 IClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#IsConnected">
            <summary>设置 IClientSession.get_IsConnected() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#Proxy">
            <summary>设置 IClientSession.get_Proxy() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#ReceiveBufferSize">
            <summary>设置 IClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#SendingQueueSize">
            <summary>设置 IClientSession.get_SendingQueueSize() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIClientSession.ssce::SuperSocket#ClientEngine#IClientSession#Socket">
            <summary>设置 IClientSession.get_Socket() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubIPosList`1">
            <summary>SuperSocket.ClientEngine.IPosList`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.#ctor">
            <summary>初始化 type StubIPosList 的新实例</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.AddT0">
            <summary>设置 ICollection`1.Add(!0 item) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.AttachBackingFieldToPosition">
            <summary>附加委托以将 StubIPosList.Position 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.Clear">
            <summary>设置 ICollection`1.Clear() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.ContainsT0">
            <summary>设置 ICollection`1.Contains(!0 item) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.CopyToT0ArrayInt32">
            <summary>设置 ICollection`1.CopyTo(!0[] array, Int32 arrayIndex) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.CountGet">
            <summary>设置 ICollection`1.get_Count() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.GetEnumerator">
            <summary>设置 IEnumerable`1.GetEnumerator() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.GetEnumerator01">
            <summary>设置 IEnumerable.GetEnumerator() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.IndexOfT0">
            <summary>设置 IList`1.IndexOf(!0 item) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.InsertInt32T0">
            <summary>设置 IList`1.Insert(Int32 index, !0 item) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.IsReadOnlyGet">
            <summary>设置 ICollection`1.get_IsReadOnly() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.ItemGetInt32">
            <summary>设置 IList`1.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.ItemSetInt32T0">
            <summary>设置 IList`1.set_Item(Int32 index, !0 value) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.PositionGet">
            <summary>设置 IPosList`1.get_Position() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.PositionSetInt32">
            <summary>设置 IPosList`1.set_Position(Int32 value) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.RemoveAtInt32">
            <summary>设置 IList`1.RemoveAt(Int32 index) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIPosList`1.RemoveT0">
            <summary>设置 ICollection`1.Remove(!0 item) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>设置 ICollection`1.Add(!0 item) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#ICollection{T}#Clear">
            <summary>设置 ICollection`1.Clear() 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>设置 ICollection`1.Contains(!0 item) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>设置 ICollection`1.CopyTo(!0[] array, Int32 arrayIndex) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>设置 ICollection`1.Remove(!0 item) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>设置 IEnumerable`1.GetEnumerator() 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#IList{T}#IndexOf(`0)">
            <summary>设置 IList`1.IndexOf(!0 item) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>设置 IList`1.Insert(Int32 index, !0 item) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>设置 IList`1.RemoveAt(Int32 index) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>设置 IEnumerable.GetEnumerator() 的 存根</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#ICollection{T}#Count">
            <summary>设置 ICollection`1.get_Count() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIPosList`1.global::System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>设置 ICollection`1.get_IsReadOnly() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIPosList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>设置 IList`1.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubIPosList`1.ssce::SuperSocket#ClientEngine#IPosList{T}#Position">
            <summary>设置 IPosList`1.get_Position() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubIProxyConnector">
            <summary>SuperSocket.ClientEngine.IProxyConnector 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIProxyConnector.#ctor">
            <summary>初始化 type StubIProxyConnector 的新实例</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubIProxyConnector.ConnectEndPoint">
            <summary>设置 IProxyConnector.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubIProxyConnector.ssce::SuperSocket#ClientEngine#IProxyConnector#Connect(System.Net.EndPoint)">
            <summary>设置 IProxyConnector.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubPosList`1">
            <summary>SuperSocket.ClientEngine.PosList`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubPosList`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubPosList`1.InitializeStub">
            <summary>初始化 type StubPosList 的新实例</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubPosList`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubPosList`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubPosList`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs">
            <summary>SuperSocket.ClientEngine.ProxyEventArgs 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs.#ctor(System.Net.Sockets.Socket)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs.#ctor(System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs.#ctor(System.Boolean,System.Net.Sockets.Socket,System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs.InitializeStub">
            <summary>初始化 type StubProxyEventArgs 的新实例</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubProxyEventArgs.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubSearchMarkState`1">
            <summary>SuperSocket.ClientEngine.SearchMarkState`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSearchMarkState`1.#ctor(`0[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSearchMarkState`1.InitializeStub">
            <summary>初始化 type StubSearchMarkState 的新实例</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSearchMarkState`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSearchMarkState`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSearchMarkState`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubSecurityOption">
            <summary>SuperSocket.ClientEngine.SecurityOption 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSecurityOption.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSecurityOption.#ctor(System.Security.Authentication.SslProtocols)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSecurityOption.#ctor(System.Net.NetworkCredential)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSecurityOption.#ctor(System.Security.Authentication.SslProtocols,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSecurityOption.#ctor(System.Security.Authentication.SslProtocols,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSecurityOption.InitializeStub">
            <summary>初始化 type StubSecurityOption 的新实例</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSecurityOption.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSecurityOption.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSecurityOption.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession">
            <summary>SuperSocket.ClientEngine.SslStreamTcpSession 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.AttachBackingFieldToLocalEndPoint">
            <summary>附加委托以将 StubSslStreamTcpSession.LocalEndPoint 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.AttachBackingFieldToReceiveBufferSize">
            <summary>附加委托以将 StubSslStreamTcpSession.ReceiveBufferSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.Close">
            <summary>设置 AuthenticatedStreamTcpSession.Close() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.Close01">
            <summary>设置 AuthenticatedStreamTcpSession.Close() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.Connect(System.Net.EndPoint)">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.ConnectEndPoint">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.InitializeStub">
            <summary>初始化 type StubSslStreamTcpSession 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.IsIgnorableException(System.Exception)">
            <summary>设置 AuthenticatedStreamTcpSession.IsIgnorableException(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.IsIgnorableExceptionException">
            <summary>设置 AuthenticatedStreamTcpSession.IsIgnorableException(Exception e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.LocalEndPointGet">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.LocalEndPointSetEndPoint">
            <summary>设置 TcpClientSession.set_LocalEndPoint(EndPoint value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnClosed">
            <summary>设置 ClientSession.OnClosed() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnClosed01">
            <summary>设置 ClientSession.OnClosed() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnConnected">
            <summary>设置 ClientSession.OnConnected() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnConnected01">
            <summary>设置 ClientSession.OnConnected() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnDataReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnDataReceivedByteArrayInt32Int32">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnError(System.Exception)">
            <summary>设置 ClientSession.OnError(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnErrorException">
            <summary>设置 ClientSession.OnError(Exception e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnGetSocket(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 AuthenticatedStreamTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.OnGetSocketSocketAsyncEventArgs">
            <summary>设置 AuthenticatedStreamTcpSession.OnGetSocket(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.ReceiveBufferSizeGet">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.ReceiveBufferSizeSetInt32">
            <summary>设置 TcpClientSession.set_ReceiveBufferSize(Int32 value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.SendInternal(SuperSocket.ClientEngine.PosList{System.ArraySegment{System.Byte}})">
            <summary>设置 AuthenticatedStreamTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.SendInternalPosListOfArraySegmentOfByte">
            <summary>设置 AuthenticatedStreamTcpSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.SetBuffer(System.ArraySegment{System.Byte})">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.SetBufferArraySegmentOfByte">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.SocketEventArgsCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 AuthenticatedStreamTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.SocketEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 AuthenticatedStreamTcpSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.StartAuthenticatedStream(System.Net.Sockets.Socket)">
            <summary>设置 SslStreamTcpSession.StartAuthenticatedStream(Socket client) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.StartAuthenticatedStreamSocket">
            <summary>设置 SslStreamTcpSession.StartAuthenticatedStream(Socket client) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.TrySendArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.LocalEndPoint">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubSslStreamTcpSession.ReceiveBufferSize">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Fakes.StubTcpClientSession">
            <summary>SuperSocket.ClientEngine.TcpClientSession 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.AttachBackingFieldToLocalEndPoint">
            <summary>附加委托以将 StubTcpClientSession.LocalEndPoint 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.AttachBackingFieldToReceiveBufferSize">
            <summary>附加委托以将 StubTcpClientSession.ReceiveBufferSize 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.Close">
            <summary>设置 TcpClientSession.Close() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.Close01">
            <summary>设置 TcpClientSession.Close() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.Connect(System.Net.EndPoint)">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.ConnectEndPoint">
            <summary>设置 TcpClientSession.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.InitializeStub">
            <summary>初始化 type StubTcpClientSession 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.IsIgnorableException(System.Exception)">
            <summary>设置 TcpClientSession.IsIgnorableException(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.IsIgnorableExceptionException">
            <summary>设置 TcpClientSession.IsIgnorableException(Exception e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.LocalEndPointGet">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.LocalEndPointSetEndPoint">
            <summary>设置 TcpClientSession.set_LocalEndPoint(EndPoint value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnClosed">
            <summary>设置 ClientSession.OnClosed() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnClosed01">
            <summary>设置 ClientSession.OnClosed() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnConnected">
            <summary>设置 ClientSession.OnConnected() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnConnected01">
            <summary>设置 ClientSession.OnConnected() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnDataReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnDataReceivedByteArrayInt32Int32">
            <summary>设置 ClientSession.OnDataReceived(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnError(System.Exception)">
            <summary>设置 ClientSession.OnError(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnErrorException">
            <summary>设置 ClientSession.OnError(Exception e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnGetSocket(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 TcpClientSession.OnGetSocket(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.OnGetSocketSocketAsyncEventArgs">
            <summary>设置 TcpClientSession.OnGetSocket(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.ReceiveBufferSizeGet">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.ReceiveBufferSizeSetInt32">
            <summary>设置 TcpClientSession.set_ReceiveBufferSize(Int32 value) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.SendInternal(SuperSocket.ClientEngine.PosList{System.ArraySegment{System.Byte}})">
            <summary>设置 TcpClientSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.SendInternalPosListOfArraySegmentOfByte">
            <summary>设置 TcpClientSession.SendInternal(PosList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; items) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.SetBuffer(System.ArraySegment{System.Byte})">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.SetBufferArraySegmentOfByte">
            <summary>设置 ClientSession.SetBuffer(ArraySegment`1&lt;Byte&gt; bufferSegment) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.SocketEventArgsCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 TcpClientSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.SocketEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 TcpClientSession.SocketEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.TrySendArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 TcpClientSession.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.LocalEndPoint">
            <summary>设置 TcpClientSession.get_LocalEndPoint() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Fakes.StubTcpClientSession.ReceiveBufferSize">
            <summary>设置 TcpClientSession.get_ReceiveBufferSize() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy">
            <summary>SuperSocket.ClientEngine.Proxy.HttpConnectProxy 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.#ctor(SuperSocket.ClientEngine.Proxy.HttpConnectProxy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.Bind(SuperSocket.ClientEngine.IProxyConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.ConnectEndPoint">
            <summary>设置 HttpConnectProxy.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.ConstructorEndPoint">
            <summary>设置 HttpConnectProxy.HttpConnectProxy(EndPoint proxyEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.ConstructorEndPointInt32String">
            <summary>设置 HttpConnectProxy.HttpConnectProxy(EndPoint proxyEndPoint, Int32 receiveBufferSize, String targetHostName) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.ConstructorEndPointString">
            <summary>设置 HttpConnectProxy.HttpConnectProxy(EndPoint proxyEndPoint, String targetHostName) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 HttpConnectProxy.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 HttpConnectProxy.ProcessReceive(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.ProcessSendSocketAsyncEventArgs">
            <summary>设置 HttpConnectProxy.ProcessSend(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.StaticConstructor">
            <summary>设置 HttpConnectProxy.HttpConnectProxy() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.AllInstances.ConnectEndPoint">
            <summary>设置 HttpConnectProxy.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.AllInstances.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 HttpConnectProxy.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.AllInstances.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 HttpConnectProxy.ProcessReceive(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimHttpConnectProxy.AllInstances.ProcessSendSocketAsyncEventArgs">
            <summary>设置 HttpConnectProxy.ProcessSend(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase">
            <summary>SuperSocket.ClientEngine.Proxy.ProxyConnectorBase 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.#ctor(SuperSocket.ClientEngine.Proxy.ProxyConnectorBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.Bind(SuperSocket.ClientEngine.IProxyConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AsyncEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.AsyncEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.CompletedAddEventHandlerOfProxyEventArgs">
            <summary>设置 ProxyConnectorBase.add_Completed(EventHandler`1&lt;ProxyEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.CompletedRemoveEventHandlerOfProxyEventArgs">
            <summary>设置 ProxyConnectorBase.remove_Completed(EventHandler`1&lt;ProxyEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.ConstructorEndPoint">
            <summary>设置 ProxyConnectorBase.ProxyConnectorBase(EndPoint proxyEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.ConstructorEndPointString">
            <summary>设置 ProxyConnectorBase.ProxyConnectorBase(EndPoint proxyEndPoint, String targetHostHame) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.OnCompletedProxyEventArgs">
            <summary>设置 ProxyConnectorBase.OnCompleted(ProxyEventArgs args) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.OnExceptionException">
            <summary>设置 ProxyConnectorBase.OnException(Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.OnExceptionString">
            <summary>设置 ProxyConnectorBase.OnException(String exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.ProxyEndPointGet">
            <summary>设置 ProxyConnectorBase.get_ProxyEndPoint() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.ProxyEndPointSetEndPoint">
            <summary>设置 ProxyConnectorBase.set_ProxyEndPoint(EndPoint value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.StartReceiveSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.StartSendSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartSend(Socket socket, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.StaticConstructor">
            <summary>设置 ProxyConnectorBase.ProxyConnectorBase() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.TargetHostHameGet">
            <summary>设置 ProxyConnectorBase.get_TargetHostHame() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.TargetHostHameSetString">
            <summary>设置 ProxyConnectorBase.set_TargetHostHame(String value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.ValidateAsyncResultSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.ValidateAsyncResult(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.AsyncEventArgsCompletedObjectSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.AsyncEventArgsCompleted(Object sender, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.CompletedAddEventHandlerOfProxyEventArgs">
            <summary>设置 ProxyConnectorBase.add_Completed(EventHandler`1&lt;ProxyEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.CompletedRemoveEventHandlerOfProxyEventArgs">
            <summary>设置 ProxyConnectorBase.remove_Completed(EventHandler`1&lt;ProxyEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.OnCompletedProxyEventArgs">
            <summary>设置 ProxyConnectorBase.OnCompleted(ProxyEventArgs args) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.OnExceptionException">
            <summary>设置 ProxyConnectorBase.OnException(Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.OnExceptionString">
            <summary>设置 ProxyConnectorBase.OnException(String exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.ProxyEndPointGet">
            <summary>设置 ProxyConnectorBase.get_ProxyEndPoint() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.ProxyEndPointSetEndPoint">
            <summary>设置 ProxyConnectorBase.set_ProxyEndPoint(EndPoint value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.StartReceiveSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.StartSendSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartSend(Socket socket, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.TargetHostHameGet">
            <summary>设置 ProxyConnectorBase.get_TargetHostHame() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.TargetHostHameSetString">
            <summary>设置 ProxyConnectorBase.set_TargetHostHame(String value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimProxyConnectorBase.AllInstances.ValidateAsyncResultSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.ValidateAsyncResult(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector">
            <summary>SuperSocket.ClientEngine.Proxy.Socks4Connector 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.#ctor(SuperSocket.ClientEngine.Proxy.Socks4Connector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.Bind(SuperSocket.ClientEngine.IProxyConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.ConnectEndPoint">
            <summary>设置 Socks4Connector.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.ConstructorEndPointString">
            <summary>设置 Socks4Connector.Socks4Connector(EndPoint proxyEndPoint, String userID) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.GetSendingBufferEndPointInt32Out">
            <summary>设置 Socks4Connector.GetSendingBuffer(EndPoint targetEndPoint, Int32&amp; actualLength) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.HandleFaultStatusByte">
            <summary>设置 Socks4Connector.HandleFaultStatus(Byte status) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 Socks4Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 Socks4Connector.ProcessReceive(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.ProcessSendSocketAsyncEventArgs">
            <summary>设置 Socks4Connector.ProcessSend(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.UserIDGet">
            <summary>设置 Socks4Connector.get_UserID() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.UserIDSetString">
            <summary>设置 Socks4Connector.set_UserID(String value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances.ConnectEndPoint">
            <summary>设置 Socks4Connector.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances.GetSendingBufferEndPointInt32Out">
            <summary>设置 Socks4Connector.GetSendingBuffer(EndPoint targetEndPoint, Int32&amp; actualLength) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances.HandleFaultStatusByte">
            <summary>设置 Socks4Connector.HandleFaultStatus(Byte status) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 Socks4Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 Socks4Connector.ProcessReceive(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances.ProcessSendSocketAsyncEventArgs">
            <summary>设置 Socks4Connector.ProcessSend(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances.UserIDGet">
            <summary>设置 Socks4Connector.get_UserID() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4Connector.AllInstances.UserIDSetString">
            <summary>设置 Socks4Connector.set_UserID(String value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector">
            <summary>SuperSocket.ClientEngine.Proxy.Socks4aConnector 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.#ctor(SuperSocket.ClientEngine.Proxy.Socks4aConnector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.Bind(SuperSocket.ClientEngine.IProxyConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.ConnectEndPoint">
            <summary>设置 Socks4aConnector.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.ConstructorEndPointString">
            <summary>设置 Socks4aConnector.Socks4aConnector(EndPoint proxyEndPoint, String userID) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.GetSendingBufferEndPointInt32Out">
            <summary>设置 Socks4aConnector.GetSendingBuffer(EndPoint targetEndPoint, Int32&amp; actualLength) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.HandleFaultStatusByte">
            <summary>设置 Socks4aConnector.HandleFaultStatus(Byte status) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.StaticConstructor">
            <summary>设置 Socks4aConnector.Socks4aConnector() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.AllInstances.ConnectEndPoint">
            <summary>设置 Socks4aConnector.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.AllInstances.GetSendingBufferEndPointInt32Out">
            <summary>设置 Socks4aConnector.GetSendingBuffer(EndPoint targetEndPoint, Int32&amp; actualLength) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks4aConnector.AllInstances.HandleFaultStatusByte">
            <summary>设置 Socks4aConnector.HandleFaultStatus(Byte status) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector">
            <summary>SuperSocket.ClientEngine.Proxy.Socks5Connector 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.#ctor(SuperSocket.ClientEngine.Proxy.Socks5Connector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.Bind(SuperSocket.ClientEngine.IProxyConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AutheticateWithUserNamePasswordSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.AutheticateWithUserNamePassword(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.ConnectEndPoint">
            <summary>设置 Socks5Connector.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.ConstructorEndPoint">
            <summary>设置 Socks5Connector.Socks5Connector(EndPoint proxyEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.ConstructorEndPointStringString">
            <summary>设置 Socks5Connector.Socks5Connector(EndPoint proxyEndPoint, String username, String password) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.ProcessAuthenticationResponseSocketSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.ProcessAuthenticationResponse(Socket socket, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 Socks5Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.ProcessReceive(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.ProcessSendSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.ProcessSend(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.SendHandshakeSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.SendHandshake(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.StaticConstructor">
            <summary>设置 Socks5Connector.Socks5Connector() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AllInstances.AutheticateWithUserNamePasswordSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.AutheticateWithUserNamePassword(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AllInstances.ConnectEndPoint">
            <summary>设置 Socks5Connector.Connect(EndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AllInstances.ProcessAuthenticationResponseSocketSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.ProcessAuthenticationResponse(Socket socket, SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AllInstances.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 Socks5Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AllInstances.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.ProcessReceive(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AllInstances.ProcessSendSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.ProcessSend(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.ShimSocks5Connector.AllInstances.SendHandshakeSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.SendHandshake(SocketAsyncEventArgs e) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy">
            <summary>SuperSocket.ClientEngine.Proxy.HttpConnectProxy 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.#ctor(System.Net.EndPoint)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.#ctor(System.Net.EndPoint,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.#ctor(System.Net.EndPoint,System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.Connect(System.Net.EndPoint)">
            <summary>设置 HttpConnectProxy.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.ConnectEndPoint">
            <summary>设置 HttpConnectProxy.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.InitializeStub">
            <summary>初始化 type StubHttpConnectProxy 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.ProcessConnect(System.Net.Sockets.Socket,System.Object,System.Net.Sockets.SocketAsyncEventArgs,System.Exception)">
            <summary>设置 HttpConnectProxy.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 HttpConnectProxy.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 HttpConnectProxy.ProcessReceive(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 HttpConnectProxy.ProcessReceive(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 HttpConnectProxy.ProcessSend(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.ProcessSendSocketAsyncEventArgs">
            <summary>设置 HttpConnectProxy.ProcessSend(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.StartReceive(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.StartReceiveSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubHttpConnectProxy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase">
            <summary>SuperSocket.ClientEngine.Proxy.ProxyConnectorBase 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.#ctor(System.Net.EndPoint)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.#ctor(System.Net.EndPoint,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.Connect(System.Net.EndPoint)">
            <summary>设置 ProxyConnectorBase.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.ConnectEndPoint">
            <summary>设置 ProxyConnectorBase.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.InitializeStub">
            <summary>初始化 type StubProxyConnectorBase 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.ProcessConnect(System.Net.Sockets.Socket,System.Object,System.Net.Sockets.SocketAsyncEventArgs,System.Exception)">
            <summary>设置 ProxyConnectorBase.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 ProxyConnectorBase.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 ProxyConnectorBase.ProcessReceive(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.ProcessReceive(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 ProxyConnectorBase.ProcessSend(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.ProcessSendSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.ProcessSend(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.StartReceive(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.StartReceiveSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubProxyConnectorBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector">
            <summary>SuperSocket.ClientEngine.Proxy.Socks4Connector 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.#ctor(System.Net.EndPoint,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.Connect(System.Net.EndPoint)">
            <summary>设置 Socks4Connector.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.ConnectEndPoint">
            <summary>设置 Socks4Connector.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.GetSendingBuffer(System.Net.EndPoint,System.Int32@)">
            <summary>设置 Socks4Connector.GetSendingBuffer(EndPoint targetEndPoint, Int32&amp; actualLength) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.GetSendingBufferEndPointInt32Out">
            <summary>设置 Socks4Connector.GetSendingBuffer(EndPoint targetEndPoint, Int32&amp; actualLength) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.HandleFaultStatus(System.Byte)">
            <summary>设置 Socks4Connector.HandleFaultStatus(Byte status) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.HandleFaultStatusByte">
            <summary>设置 Socks4Connector.HandleFaultStatus(Byte status) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.InitializeStub">
            <summary>初始化 type StubSocks4Connector 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.ProcessConnect(System.Net.Sockets.Socket,System.Object,System.Net.Sockets.SocketAsyncEventArgs,System.Exception)">
            <summary>设置 Socks4Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 Socks4Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 Socks4Connector.ProcessReceive(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 Socks4Connector.ProcessReceive(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 Socks4Connector.ProcessSend(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.ProcessSendSocketAsyncEventArgs">
            <summary>设置 Socks4Connector.ProcessSend(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.StartReceive(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.StartReceiveSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4Connector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector">
            <summary>SuperSocket.ClientEngine.Proxy.Socks4aConnector 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.#ctor(System.Net.EndPoint,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.Connect(System.Net.EndPoint)">
            <summary>设置 Socks4aConnector.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.ConnectEndPoint">
            <summary>设置 Socks4aConnector.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.GetSendingBuffer(System.Net.EndPoint,System.Int32@)">
            <summary>设置 Socks4aConnector.GetSendingBuffer(EndPoint targetEndPoint, Int32&amp; actualLength) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.GetSendingBufferEndPointInt32Out">
            <summary>设置 Socks4aConnector.GetSendingBuffer(EndPoint targetEndPoint, Int32&amp; actualLength) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.HandleFaultStatus(System.Byte)">
            <summary>设置 Socks4aConnector.HandleFaultStatus(Byte status) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.HandleFaultStatusByte">
            <summary>设置 Socks4aConnector.HandleFaultStatus(Byte status) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.InitializeStub">
            <summary>初始化 type StubSocks4aConnector 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.ProcessConnect(System.Net.Sockets.Socket,System.Object,System.Net.Sockets.SocketAsyncEventArgs,System.Exception)">
            <summary>设置 Socks4Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 Socks4Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 Socks4Connector.ProcessReceive(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 Socks4Connector.ProcessReceive(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 Socks4Connector.ProcessSend(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.ProcessSendSocketAsyncEventArgs">
            <summary>设置 Socks4Connector.ProcessSend(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.StartReceive(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.StartReceiveSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks4aConnector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector">
            <summary>SuperSocket.ClientEngine.Proxy.Socks5Connector 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.#ctor(System.Net.EndPoint)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.#ctor(System.Net.EndPoint,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.Connect(System.Net.EndPoint)">
            <summary>设置 Socks5Connector.Connect(EndPoint remoteEndPoint) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.ConnectEndPoint">
            <summary>设置 Socks5Connector.Connect(EndPoint remoteEndPoint) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.InitializeStub">
            <summary>初始化 type StubSocks5Connector 的新实例</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.ProcessConnect(System.Net.Sockets.Socket,System.Object,System.Net.Sockets.SocketAsyncEventArgs,System.Exception)">
            <summary>设置 Socks5Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.ProcessConnectSocketObjectSocketAsyncEventArgsException">
            <summary>设置 Socks5Connector.ProcessConnect(Socket socket, Object targetEndPoint, SocketAsyncEventArgs e, Exception exception) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 Socks5Connector.ProcessReceive(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.ProcessReceiveSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.ProcessReceive(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 Socks5Connector.ProcessSend(SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.ProcessSendSocketAsyncEventArgs">
            <summary>设置 Socks5Connector.ProcessSend(SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.StartReceive(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.StartReceiveSocketSocketAsyncEventArgs">
            <summary>设置 ProxyConnectorBase.StartReceive(Socket socket, SocketAsyncEventArgs e) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.ClientEngine.Proxy.Fakes.StubSocks5Connector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
